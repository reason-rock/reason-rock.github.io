[ { "title": "LOAM std bad_alloc, multiScanRegistration 에러 해결", "url": "/posts/LOAM-std-bad_alloc,-multiScanRegistration-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0/", "categories": "Ros, Ros_Ko", "tags": "std::bad_alloc, PCL, SLAM, loam, multiScanRegistration", "date": "2022-12-17 10:53:11 +0900", "snippet": "PCL을 가지고 수도 없이 삽질을 하던 끝에 어찌어찌 해결을 보고,대안으로 진행중이던 새로운 센서 연동이고 뭐고 일단 다 미뤄두고 본격적으로 라이다로 할 수 있는 것들에 집중하여 경험해보고자 완성된 패키지를 구동해보는 것으로 방향성을 틀어보려 했다.그래서 예전부터 해보고 싶었던 라이다 SLAM을 위해 여기저기 검색해보니 loam이 그나마 다가가기 쉬워 보였고, 설치 하고 실행해보았다.다 짜놓은 코드 그냥 설치해서 빌드만 하면 되니 에러는 없겠지….. 라는 기대를 품고 돌려봤으나어림도 없지 ㅋㅋterminate called after throwing an instance of 'std::bad_alloc' what(): std::bad_alloc[multiScanRegistration-2] process has died [pid 9926, exit code -11, cmd /home/reason_rock/loam_Ws/devel/lib/loam_velodyne/multiScanRegistration /multi_scan_points:=/velodyne_points __name:=multiScanRegistration __log:=/home/reason_rock/.ros/log/337aff0e-7ebd-11ed-b4f4-6146aee6e92f/multiScanRegistration-2.log].log file: /home/reason_rock/.ros/log/337aff0e-7ebd-11ed-b4f4-6146aee6e92f/multiScanRegistration-2*.log에러가 떴다.다행히도(?)이 문제는 공식 깃허브 리포지토리에 Trouble shooting 항목에 정의되어 있는 문제였다.공식 문서에서 제시하는 해결책은 간단하다.Cmake list 35번째 줄add_definitions( -march=native )을 주석처리 후 빌드그럼에도 불구하고, 잘 되지 아니했다.그래서 또 이래저래 서칭을 해보니 컴파일시 C++ 버전을 바꿔보라, PATH 지정을 해봐라, 뭐를 추가해라 뭐를 빼라 하라는 모든 것을 다 해봤다.그랬음에도 불구, 잘 되지 않자 결국 마음속으로 부정하고, 또 부정했던 해결책 밖에 남지 않았다. 바로 ros noetic에서 문제가 좀 많이 생기더라, dashing으로 버전을 내려라….. 그게 아니면 PCL이 문제라는 것이었다. 젠장할…. PCL로 몇날며칠을 고생하고 겨우 한가지 문제를 해결해서 안도한게 엊그제였는데, PCL은 오늘도 내 발목을 거하게 잡으신다.그래서 포맷을 하려다 똑같이 설정해두던 다른 노트북에 깔고 돌려보았다.여전히 해당 에러가 발생하였고, 그럼 그렇지 라는 생각으로 cmake 주석처리 후 빌드했는데얼레? 돌아간다. 일단 저건 안뜨더라.물론 뭔가 이상하긴 마찬가지였다.Fixed frame의 camera_init은 에러를 뿜어냈고 포인트클라우드와 imu는 보이지도 않는데 그냥 좌표계 원점만 허공으로 날라다니고 있었다.그러나 에러 메세지를 보니 간단히 해결할 수 있었다.그냥 에러처럼 경로를 맞춰 /를 하나 추가해주니 정상적으로 실행되었다.이런 젠장할.결국에는 내 컴퓨터가 문제였던 것이었다.2주간의 라이다/PCL 삽질기는 이렇게 다른 국면을 맞게 되었다." }, { "title": "AttributeError module 'serial' has no attribute 'Serial' 해결", "url": "/posts/AttributeError-module-'serial'-has-no-attribute-'Serial'-%ED%95%B4%EA%B2%B0/", "categories": "Linux, (Ko)", "tags": "AttributeError, serial, 시리얼, nmea, pyserial, PermissionError", "date": "2022-12-17 10:53:11 +0900", "snippet": "MRD-1000v2 설정 중에 혹시나 시리얼 모듈이 문제인가 싶어서 재설치 하고 뭐하고 이것저것 하다가 포기하고 잤던 다음날, 다른 GPS 에서는 잘 돌아갔던 nmea 패키지조차 켜지지 않았다.\"Traceback (most recent call last): File \"/opt/ros/noetic/lib/nmea_navsat_driver/nmea_topic_serial_reader\", line 38, in &lt;module&gt; libnmea_navsat_driver.nodes.nmea_topic_serial_reader.main() File \"/opt/ros/noetic/lib/python3/dist-packages/libnmea_navsat_driver/nodes/nmea_topic_serial_reader.py\", line 70, in main GPS = serial.Serial(port=serial_port, baudrate=serial_baud, timeout=2) AttributeError: module 'serial' has no attribute 'Serial'\"어찌어찌 하다가 엎어져 잤기에, 뭘 했는지에 대한 기억이 없었다.그래서 오늘도 시작하는 삽질기nmea 문제인가 싶어서 재설치 해보았으나 어림도 없었고, 모듈이 없다길래 pip install serial, pip install pyserial 다 해봤지만 이미 존재한다는 답만 돌아왔다.그래서 싸그리 다 밀고 다시 깔아보자는 생각으로pip uninstall serial을 통해 serial을 제거하고 pyserial을 재설치 하려고 했는데 늘 그렇듯 새빨간 에러가 나의 앞길을 막았다.“PermissionError: [Errno 13] Permission denied: ‘WHEEL’”듣도 보도 못하던 문제였는데, 뭐 Permission 에러기에 sudo 하면 되겠거니 싶었다.sudo pip uninstall serialpip install --upgrade --force-reinstall pyserial그래서 했다.그리고 블로그 글을 쓰던 중 pip에 sudo를 붙여도 된다고 당당하게 글을 써도 되나 싶어서 찾아보니 하지 않는게 좋단다.pip에 sudo를 붙이는건 보안측면에서 위험하다고. 생각해보면 하지말라는 걸 해서 좋을건 없지 않겠는가.그래서 대안으로pip3 install 패키지 --user를 제시하니 가능하면 이것을 사용하는게 안전할 것이다.해결! AttributeError: module ‘serial’ has no attribute ‘Serial’“는 그냥 serial 모듈이 아닌 pyserial module를 깔아야 한다. pip에도 sudo를 붙일 수 “는” 있다. 그럼에도 불구하고 위험하니 가능하면 pip3 install 패키지 –user을 사용하는 것이 안전하다." }, { "title": "MRD-1000v2 둘러보기", "url": "/posts/MRD-1000v2-%EB%91%98%EB%9F%AC%EB%B3%B4%EA%B8%B0/", "categories": "Device Overview, GPS(Ko)", "tags": "MRD-100v2, MRD, MRP-2000, 시너렉스, ROS, ROS GPS, RTK. GPS", "date": "2022-12-17 09:53:11 +0900", "snippet": "GPS를 샀댄다. 어느날 가보니 그랬다.뭘 샀냐고 물으니 시너렉스꺼 샀댄다.개인적으로 시너렉스사의 GPS에 감성적인 부분에서 만족도가 높지 않아서 별로 선호하지 않았지만…. 어쩌겠는가.나는 측위담당도 아니고, 구매권한도 없으니 그런갑다 해야지.다만 만족도 하락에 기여한 원인중 하나가 장착부 설계시 마땅한 마운팅 브라켓이나 포인트가 없다는 점이었는데, 가볍게 묵살되어 슬펐다.그렇게 온 GPS는 일주일 정도 지켜봤는데 졸업시즌이고 다들 바쁘신지 아무도 손을 안대길래 안바쁘고 시간 많은(?) 휴학생이 열어보기로 했다.MRD-1000v2. 기존 GPS는 언박싱까지는 해보지 않았기에 어떤지 잘 모르겠으나 박스는 평범하다.다만 열어보니 좋았던 점과 나빴던 점이 있었는데, 먼저 기존에 사용하던 MRP-2000에서의 불만에 대해 알아보자(하드웨어, 설계파트 한정)MRP-2000의 단점(H/W) 적당한 마운팅 부품 없고, 사방팔방에 나있는 포트 떨구면 가볍게 깨질것 같은 플라스틱 바디 위와 함께 이어지는 낮은 안정성-시리얼로는 값이 잘 나와도 한번씩 LCD 표출이 안되는 문제와, LCD가 아예 죽어버리는 문제가 있었다. 무슨 싸구려 아두이노 OLED도 아니고…(같은 부품일수도) 잘 빠지고 부서지기 좋은 얇은 안테나 커넥터MRD-1000v2에서의 변화(H/W) 플라스틱에서 알루미늄으로의 발전은 상당히 인상적이었다. 발열처리 면에서도 조금 낫겠지다만 아노다이징 퀄리티는 조금 그랬다. 뭔가 손으로 쓸면 미세한 가루가 묻어나오는 느낌 사방팔방 나 있던 포트도 나름 발전해서 안테나는 상단, 나머지 포트는 우측에 몰아 두었다.좋은 변화였다.다만 여기서 개인적으로 퇴보했다 싶은 부분이 있는데, 기존에는 본체에 내장된 마이크로 5pin 전원/RS232 포트가, 주렁주렁한 하네스로 변경되었다는 점이었다. 개인적으로 MRD에서 가장 아쉬운 점이었다. LCD는 동일한것 같았다. 새제품이니 물론 지금은 잘 작동되었다. 단색이라 조금 많이 감성적으로 아쉬움. 상단에 3가지 안테나 포트가 모두 위치했고, 커넥터도 일반적인 SMA로 통일되어 그나마 튼튼해 보였다.개인적으로 가장 만족하는 부분 기존 MRP는 GPS안테나가 꽤 고급스러워서 좋았는데, 이번 MRD는 무슨 알리익스프레스에서 싸구려 안드로이드 올인원을 사면 오는 그런 안테나가 와서 감성적으로 아쉬웠다.왜 이렇게 자세하냐고? 그건 본인이 산 올인원에 거의 똑같이 생긴 안테나가 왔었기 때문이다. 간단히 Ros에서 데이터 까지만 받아보고 집에 가야겠다고 생각했다. (그랬으면 안됐었는데…)MRD-1000v2 초기 세팅(H/W) 안테나 3개를 순서에 유의하여 장착한다. 먼저 전원 및 시리얼 하네스를 측면 포트를 통해 연결한다. 그중 적/흑 선을 적당한 전원에 연결하여 전력을 공급한다. 전원이 켜지는 동안 RS-232 to usb 선을 PC와 연결한다.MRD-1000v2 초기 세팅(S/W) GPS에 사용되는 가장 일반적인 nmea 드라이버를 설치해 준다. sudo apt-get install ros-noetic-nmea-navsat-driver 연결되 포트 위치 확인 및 권한 설정 cd /devls (GPS 포트 확인) sudo chmod 777 /dev/ttyUSB0 (포트에 권한 부여, ttyUSB0을 GPS 파일이라 가정) nmea 실행 rosrun nmea_navsat_driver nmea_topic_serial_reader _port:=/dev/ttyUSB0 _baud:=115200 rostopic으로 값 확인하기 rostopic echo /nmea_sentence 어라? 근데 안되네?왜인진 몰라도 안되더라. 메세지가 제대로 출력이 안되고 있는건지, 버드레이트를 바꿔봐도 안되더라.혹시나 실내라서 값이 안잡히는 건가 싶어 차에 얹어서 나가고 싶었지만, 차 한번 빼려면 테트리스를 해야하는 좁은 연구실의 비애로 인해 할 수 없었고… 최-첨단 GPS 테스트 플랫폼을 급조해서(아래 사진 참조) 비가 조금씩 내리는 와중에 끌고 나가 보았다.어느정도 밖으로 들고 나가니 단말기 자체의 LCD에서는 좌표가 정상적으로 잡혔다.LTE 우선, DMB 우선모드 그리고 출력형식을 일일히 다 바꿔보고, 메뉴얼에서는 아직 구현이 안되어 있다던 nmea 출력방식 옵션도 바꾸어 보았으나 똑같았다.혹시나 nmea 설치가 잘못되었나 싶어 nmea 부터 Serial, Pyserial을 모두 제거후 일일히 재설치 해 보았지만 별 다른 진전은 없었다. 그러던 중 간단한 해결책이 생각났다.에러가 뜨는 상태에서 시리얼 선만 뽑아 실내에 있는 차의 MRP에 연결해 보았는데, 좌표값은 0,0,0으로 나왔으나 최소한 에러는 뜨지않았다.그래서 그걸 다시 빼서 MRD에 꽂으니? 다시 에러가 뜨기 시작했다.혹시나 싶어서 메뉴얼을 다시 확인했으나 MRD와 MRP의 메세지 출력관련 차이는 전혀 없었다.ROS 연동 매뉴얼이 MRP기준으로만 있고 MRD는 언급이 없던 이유가 이거였던 걸까?" }, { "title": "C++ internal compiler error 해결", "url": "/posts/c++-internal-compiler-error-%ED%95%B4%EA%B2%B0/", "categories": "Linux, (Ko)", "tags": "우분투, 리눅스, C++, 컴파일러, compiler, 스왑 메모리, swap, swapoff, swapfile", "date": "2022-12-10 13:53:11 +0900", "snippet": "열심히 PCL을 빌드하며, 온갖 에러들을 헤치고 이젠 무조건 된다! 라는 생각을 하는 순간c++: internal compiler error를 맞닥들였다.다행히(?) 이 에러는 코드나 패키지의 에러가 아니었는데, 메모리 쪽 문제라 스왑 메모리를 재설정 하면 된다고 한다.먼저 swap 메모리에 있는걸 싸그리 날린 후,sudo swapoff -a메모리를 리사이즈 해준다.sudo dd if=/dev/zero of=/swapfile bs=1G count=8그후 Swap 파일을 만들고, 활성화 해준다sudo mkswap /swapfile#만들고sudo swapon /swapfile#활성화아래 명령어를 통해 Swap에 대한 정보를 확인할 수 있다.grep SwapTotal /proc/meminfo" }, { "title": "PCL 삽질기", "url": "/posts/PCL-%EC%82%BD%EC%A7%88%EA%B8%B0/", "categories": "Ros, Ros_Ko", "tags": "PCL, pointcloud, C++, libpcl, ros-pcl, noetic, ros1 C++11, C++14", "date": "2022-12-10 10:53:11 +0900", "snippet": "PCL 삽질기라이다 다뤄보기 위해 드라이버부터 설치하는데 거기서부터 모든 것이 시작되었다.(사실 나중에 알고보니 PCL 문제도 아니었다. 젠장)C++ 버전 11로 빌드해야 한다는 정체불명의 메모 하나를 믿고 단순히 C++버전만 14에서 11로 낮춰 주었다.당연하게도 C++11은 PCL 1.10.0의 최소 요구사항 C++14를 충족하지 못하여 빌드가 불가능했다.그때 눈치를 챘어야 했는데….한치의 의심도 없이 PCL 충돌 문제만 해결하면 라이다 이슈를 해결할 수 있으리라 믿고 장장 5일에 걸린 대 삽질을 시작했다.무의미한 반복과 지금 와서보면 의미없는 짓을 제거하고 누군가에겐 도움이 될 만한 내용만 걸러서 서술해 보겠다.(쓰고 나니 별거 없더라…)PCL 버전을 낮추기 위한 방법먼저 깃허브에서 원하는 버전을 받아준다.https://github.com/PointCloudLibrary/pcl/releases우분투 환경에서 진행할 것이기에 tar.gz 파일로 받아준다.다운받은 경로로 가서 압축을 풀어준다cd Downloadstar xvfz pcl-pcl-1.당신이 받은 버전.tar.gz압축 푼 폴더에 build 폴더를 만들고 cmake 한다cd pcl-pcl-1.당신이 받은 버전.tar.gzmkdir buildcd buildcmake ..여기까지 순조롭게 왔다면sudo make -j8 install필자의 경우 cmake 단계에서도 몇번 고배를 마시고, make install에서는 왠지는 몰라도 거의 모든 에러를 다 경험한 것 같다. 메모리 에러 -&gt; 별도의 글로 다루어 보겠다. c++ 충돌 저장공간 부족 그냥 엄청 느려서 한눈판사이 절전모드 들어감5…..지금 생각해보니 그냥 본인의 잘못이 큰 것 같다만..PCL…그냥 단순한 라이브러리라고 생각했는데 여태껏 빌드해본 어떤 패키지(몇 개 안해봄)보다 무겁고 험난했다.중간에 메모리 에러가 나서 몇번씩 초기화하고 메모리를 잡아가면서 진행해야 했고, 그 때문이었는지 그냥 우연이었는지 저장공간 부족 에러가 떠서 잘 안쓰는 파일을 다른데로 이주시키고 다시 진행해야 했고,여러번 끊겼다가 다시 시작해서인지 GNU관련 에러도 뿜어내고, 무엇보다도 J8, J12, J16 다 해봤는데 정말 역대급으로 속도가 느렸다.특히 J16으로 하니 모든 코어를 풀로 사용해서 그런지 커서가 안움직일 정도라서 그냥 모셔두어야 했다.결국 몇번 터뜨려먹은 다음에 J12로 비행기 이륙소리를 한참 들어가면서 결국 빌드에 성공했다.이렇게 빌드 하고 나면 정상적인 설치와 설치된 버전 확인을 위해dpkg -s libpcl-dev | grep 'Version'명령어를 입력하여 확인할 수 있다.그러나 필자를 기다리고 있는 에러는 따로 있었다. 다시 라이다 패키지로 돌아와 빌드를 진행하니….“Could not find a package configuration file provided by “pcl_ros””그렇다. 그랬던 것이다. 내가 백날 설치했던 PCL은 pcl_ros가 아닌 그냥 PCL이었고, pcl-ros를 아래 명령어로 설치하니 다시 1.10.0이 설치되는 것이었다.sudo apt install ros-본인 ROS 버전-pcl-ros그래서 이제부터 pcl-ros 버전을 낮추는 방법에 대해 설명하냐? 그렇지 않다.여기서 나의 PCL 삽질기는 여기서 마무리 된다. 왜냐고?사실 PCL이 문제가 아니었음을 이 삽질을 새벽까지 하다가 엎어져 잠이 들기 직전 스쳐 지나간 생각이 증명해 주었기 때문에….그렇게 황금같은 주말을 밤새가며 했던 삽질은 아무런 성과도, 보람도 없이 이렇게 찝찝하게 끝이 났다.결국 여기서 쓸만한 내용은 PCL 다운그레이드 방법이 되시겠다.올리지 않으려고 했는데, 5일간의 삽질에 대한 넋두리가 필요해서 그냥 올린다.거의 뭐 ‘안녕하세요 이웃님들, 오늘은 PCL 삽질에 대해 알아보았어요~~~’ 급의 글이라 몹시 죄송스러울 따름이다." }, { "title": "우분투 Error mounting /dev/~ 해결", "url": "/posts/%EC%9A%B0%EB%B6%84%ED%88%AC-Error-mounting-%ED%95%B4%EA%B2%B0/", "categories": "Linux, (Ko)", "tags": "우분투, 리눅스, 마운트, 외장하드, usb, ntfsfix", "date": "2022-11-27 10:53:11 +0900", "snippet": "어느날 갑자기 외장하드를 우분투에 연결하니Error mounting /dev/sda2 at /media/ 라는 창과 함께 저장소 접근 자체가 불가능했다.결국 큰 파일을 속도 느린 usb에 나눠담아 옮기는 고생을 하고 언젠가는 고쳐야지 하고 미루다가 결국 칼을 빼들었다.윈도우로 부팅, 연결해보니 정상적으로 저장소 접근 및 읽기쓰기가 가능했고, 디스크 오류복구와 조각모음을 돌린 후 다시 우분투에서 연결해 보았으나 증상은 여전했다.결국 해답은 우분투에서 찾을 수 있었는데, 그저sudo ntfsfix /dev/sda2한줄로 간편하게 해결할 수 있었다.*경로는 자신의 경로에 맞게 sda2 부분을 에러메세지와 동일하게 맞추어 주면 된다." }, { "title": "ROS 2 Foxy 설치(Ubuntu 20.04)", "url": "/posts/ROS-2-Foxy-%EC%84%A4%EC%B9%98(Ubuntu-20.04)/", "categories": "Ros, Ros_Ko", "tags": "우분투, 리눅스, ROS2, Foxy, ROS설치", "date": "2022-11-26 10:53:11 +0900", "snippet": "ROS2-Foxy 설치텐서플로우 gpu 설정을 위한 삽질 과정에서 우발적으로 우분투 싹 밀고 22.04로 올렸다가 보기좋게 실패한 후 다시 20.04로 내려왔다.물론 백업따위 해두지 않았기에, ros2를 다시 설치해야 했다.이럴 때 마다 매번 ROS 위키를 찾아 들어가기 귀찮아서 이참에 아예 여기 저장하기로 했다. 로케일 세팅 sudo apt update &amp;&amp; sudo apt install localessudo locale-gen en_US en_US.UTF-8sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8export LANG=en_US.UTF-8 repository 추가 sudo apt updatesudo apt install curl gnupg2 lsb-releasecurl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -sudo sh -c 'echo \"deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" &gt; /etc/apt/sources.list.d/ros2-latest.list' 진짜 설치 sudo apt updatesudo apt install ros-foxy-desktop bash파일 설정 source /opt/ros/foxy/setup.bash 설치 확인 - 개인적으로 ros2에서 제일 마음에 드는 부분 ros2 run demo_nodes_cpp talkerros2 run demo_nodes_py listener 부가 설치 sudo apt install -y python3-pippip3 install -U argcompletesudo apt install python3-colcon-common-extensions 끝!" }, { "title": "ROS 1 Noetic 설치(Ubuntu 20.04)", "url": "/posts/ROS-1-Noetic-%EC%84%A4%EC%B9%98(Ubuntu-20.04)/", "categories": "Ros, Ros_Ko", "tags": "우분투, 리눅스, ROS1, noetic, ROS설치", "date": "2022-11-26 10:53:11 +0900", "snippet": "텐서플로우 gpu 설정을 위한 삽질 과정에서 우발적으로 우분투 싹 밀고 22.04로 올렸다가 보기좋게 실패한 후 다시 20.04로 내려왔다.물론 백업따위 해두지 않았기에, ros를 다시 설치해야 했다.이럴 때 마다 매번 ROS 위키를 찾아 들어가기 귀찮아서 이참에 아예 여기 저장하기로 했다. repository 추가 sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" &gt; /etc/apt/sources.list.d/ros-latest.list'sudo apt install curl # if you haven't already installed curlcurl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - 설치 sudo apt updatesudo apt install ros-noetic-desktop-full bash 설정 source /opt/ros/noetic/setup.bashecho \"source /opt/ros/noetic/setup.bash\" &gt;&gt; ~/.bashrcsource ~/.bashrc 추가설치 sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essentialsudo rosdep initrosdep update +유튜브 강의나 책을 보니 이렇게도 설치가 가능하다고 한다(한줄설치)wget -c https://raw.githubusercontent.com/qboticslabs/ros_install_noetic/master/ros_install_noetic.sh &amp;&amp; chmod +x ./ros_install_noetic.sh &amp;&amp; ./ros_install_noetic.sh" }, { "title": "우분투 그래픽드라이버 설치 후 화면 밝기가 변경되지 않을 때", "url": "/posts/%EC%9A%B0%EB%B6%84%ED%88%AC-%EA%B7%B8%EB%9E%98%ED%94%BD%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%84%A4%EC%B9%98-%ED%9B%84-%ED%99%94%EB%A9%B4-%EB%B0%9D%EA%B8%B0%EA%B0%80-%EB%B3%80%EA%B2%BD%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C/", "categories": "Linux, (Ko)", "tags": "우분투, 리눅스, 화면밝기, grub, backlight, acpi", "date": "2022-11-20 10:53:11 +0900", "snippet": "sudo gedit /etc/default/grub를 통해 grub 세팅 파일을 열어준다.GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”다음 문구의 quiet splash 뒤에 acpi_backlight=vendor acpi_osi=Linux를 추가하여GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash acpi_backlight=vendor acpi_osi=Linux”와 같이 만들어준다.그 후sudo update-grub를 통해 grub 수정사항을 반영해준 뒤 재부팅하면 밝기조절이 가능해 질 것이다.2022.12.20 수정) 다시 증상이 재발했고, 이번엔 저 방법도 효과가 없었다." }, { "title": "우분투에서 외장모니터가 나오지 않을 경우", "url": "/posts/%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-%EC%99%B8%EC%9E%A5%EB%AA%A8%EB%8B%88%ED%84%B0%EA%B0%80-%EB%82%98%EC%98%A4%EC%A7%80-%EC%95%8A%EC%9D%84-%EA%B2%BD%EC%9A%B0/", "categories": "Linux, (Ko)", "tags": "우분투, 리눅스, 모니터, dpkg, gdm, lightdm, 우분투 그래픽드라이버", "date": "2022-11-19 10:53:11 +0900", "snippet": "보나마나 드라이버 문제일것이라 생각하고sudo ubuntu-drivers autoinstallsudo reboot를 시도하려 하였으나, 본인의 경우 텐서플로우 GPU 셋업에 2주를 버린 사람으로, 행여 그래픽 드라이버를 건드리면 무슨 일이 일어날지 알 수 없어서 다른 길을 찾아보았다.sudo dpkg-reconfigure gdm3sudo reboot실패sudo apt-get install --reinstall lightdm ubuntu-desktop하고 중간에 gdm 대신 lightdm을 설정해주면 화면이 켜졌으나, 로그인 창의 디자인이 바귀어 마음에 들지 않았다. 그래서 lightdm을 제거하고 다시sudo apt-get install --reinstall lightdm ubuntu-desktop설치한 후 gdm으로 설정해주고 재부팅하니 화면이 나왔다.끝!" }, { "title": "데이터와 기계학습", "url": "/posts/%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%99%80-%EA%B8%B0%EA%B3%84%ED%95%99%EC%8A%B5/", "categories": "Study, AI", "tags": "데이터, 변수, 기계학습, 지도학습, 비지도학습, 강화학습, 신경망, 분류, 회귀, 군집화", "date": "2022-11-13 10:53:11 +0900", "snippet": "데이터 산업데이터 과학: 데이터 만들고 만들어진 데이터를 이용하는 일 -&gt; 데이터 자체를 다룸데이터 공학: 데이터를 다루는 도구를 만들고 데이터를 관리 -&gt; 데이터 다루는 것을 도와준다.데이터 시각화의 가장 중요한 툴 : 표가로를 행(row) 세로를 열(column) -&gt; 표를 데이터셋이라 하기도 함행은 개체(instance), 관측치(observed value), 기록(record), 기록(record), 사례(example), 경우(case)열은 특성(feature), 속성(attribute), 변수(variable), field 등으로 표현되기도 함.독립변수종속변수변수 variable표에서 변수는 열이다.독립변수 : 원인종속변수 : 결과독립변수와 종속변수의 관계를 인과관계라고 한다.인과관계&lt;상관관계 상관관계가 더 큰 개념특성을 파악하는 것이 중요하다.기계학습은 지도, 비지도, 강화학습으로 이루어져 있다.지도학습(supervised learning)은 분류(classification)과 회귀(regression) -&gt; 정답이 있는 문제를 해결 -&gt; 기존 정보 기반비지도학습(unsupervised learning)은 군집화(clustering), 변환(transform), 연관(association)으로 이루어져 있다. -&gt; 통찰력을 통해 새로운 의미나 관계를 밝힘 -&gt; 대상의 특성 파악강화학습(reinforcement learning) 과정을 계속 반복해 스스로 성장, 더 좋은 보상을 위해 수련 -&gt; 행위의 상벌 기반Neural Network 신경망지도학습과거 데이터 필요데이터를 독립변수와 종속변수로 구분학습을 통해 공식을 유도-&gt; 이를 모델이라 함회귀(regression)예측하고 싶은 종속변수가 숫자일때 주로 사용.분류(classification)군집화(clustering)비슷한것을 찾아서 그룹을 만드는것" }, { "title": "Arguments (UpgradePrompt(old='22.2', new='22.2.2'),) 해결법", "url": "/posts/Arguments_-(UpgradePrompt(old='22.2',-new='22.2.2'),)-%ED%95%B4%EA%B2%B0/", "categories": "Linux, (Ko)", "tags": "우분투, 리눅스, pip, pip버전, 파이썬", "date": "2022-11-12 10:53:11 +0900", "snippet": "pip 버전문제라는 것은 에러메세지를 보니 깨달았고, 쉽게pip3 install --upgrade pipsudo python3 -m pip uninstall pipsudo apt-get install python3-pip --reinstall로 해결할 수 있을줄 알았는데, 어림도 없었고,sudo pip3 install pip --upgrade결국에는sudo python3 -m pip uninstall pipapt updateapt upgradereboot완전히 다 지우고 나서완전 재설치 해서curl https://bootstrap.pypa.io/get-pip.py -o get-pip.pypython get-pip.py두줄로 해결했다." }, { "title": "오늘 올리지 않으면 평생 못 올릴 것 같아 급하게 올리는 DJI RoboMaster(로보마스터) 후기", "url": "/posts/DJI-RoboMaster(%EB%A1%9C%EB%B3%B4%EB%A7%88%EC%8A%A4%ED%84%B0)/", "categories": "Device Overview, Educational products(Ko)", "tags": "DJI, RoboMaster, 로보마스터, 블럭코딩, 자율주행, 라인인식, 객체인식, 비전마커, 로봇", "date": "2022-10-23 19:34:01 +0900", "snippet": "고교생 교육컨텐츠 자문을 위해 DJI 로보마스터 제품을 가지고 간단한 알고리즘 구현을 해 보았다.할말이 많지만… 시작하면 끝도 없을 것이기에 간단히 정리해둔다.기회가 된다면 추후에 더 자세히 다뤄볼 수도…?장점 UI가 전용 프로그램으로 잘 만들어져 있다. 드론으로 성장한 기업이라 그런지 짐벌제어가 부드럽다. 마찬가지 이유로 카메라도 광각에 고성능이다. 샤시가 메카넘 휠이기에 평행이동이 가능하다.단점 코드 구현에서 사용자의 자유도가 낮다. (장점이자 단점) 번역이 조금 어색하다. (주행속도를 ‘변환속도’라고 표기하는 등) 생각보다 인식성능이 썩 좋지는 않다 배터리가 빠르게 닳는다. (이건 관리에 따른 수명문제일수도) 무선랜카드가 없는 데스크탑에서는 사용이 까다롭다.총평교육목적으로 사용했던 이번 구현에서는 가장 크게 다가왔던 부분이 단점 1과 2번이었는데, 물론 메뉴얼을 숙지하지 않은 본인의 책임이겠지만 라인 인식 기능이 흑색을 지원하지 않는다는 것은 상당히 의외였다. 로보마스터의 라인인식은 적색, 녹색, 청색 (R,G,B) 라인만 인식이 가능하다. 또한, 이러한 RGB값도 수치로 지정하는 것이 아닌 3개중 택1하는 방식으로, 자유도가 몹시 낮다. (실제 구현 과정에서 붉은 타일이 있으니 채도가 다름에도 해당 타일을 더 좋아하는 경향을 보여 결국 파란 테이프로 교체해야 했다.) (Korean Red와 Chinese Red가 다른걸까?) 또한 라인인식을 구현 할때, 대부분이 자동화되어 말 그대로 블럭만 배치하면 되는 비전마커 인식 등의 다른 기능과 달리, RAW데이터에 가까운 값이 들어온다는 것도 장점이 될 수 있겠지만 이번 케이스에서는 단점이었다. 라인이 인식되지 않았을 경우 2, 라인이 인식되었을 경우 42의 길이의 리스트 자료형을 반환하는데, 각 값이 어떤 feature를 반영하는지에 대한 해설을 찾을 수 없었다. 단지 7번이 detection에서 offset과 관련된 값이라는거 정도….? 해당 값이 실시간 영상과 함게 무선으로 전달되기에, 값에 일부 딜레이가 있어 실시간으로 값을 분석하는데도 어려움이 있었다. (유선으로 연결이 되긴 하는듯)그럼에도 불구하고, 좋은 점도 많았다.(가격을 생각하면 당연하지만…) 전용 프로그램을 통해 QR코드 스캔으로 단번에 로봇과 페어링 하는 방식이 상당히 참신하고, 편리했다. 아무래도 대기업이라 그런지 기계적인 완성도와 디자인은 최상위 수준이었다. Detection을 할 때는 크게 의미가 없었지만, 설정에서 최대 속도로 설정하였을 시, 속도가 상당히 빠른 편이었다.(관성 드리프트 가능) 처음부터 구현하려면 상당히 어려운 비전마커 인식 및 추적은 말 그대로 블럭 두개만 쌓으면 되는 수준이었고, 조금 더 불친절하긴 했으나, 라인 인식도 크게 어렵지는 않았다.결과1.객체인식/추적 비전마커 발견시 led색 바뀌며 추적하는 모습을 볼 수 있다.2.라인인식, 객체탐지/사격, 반복탐지시 통과 라인을 따라 정해진 영역을 기동하다가 타깃(비전마커)발견시 정차 후 발포, 그 후 다시 기동한다. 과거 발견한 타깃 발견시 발포 없이 계속 기동한다." }, { "title": "현대-기아 계기판 CAN 신호 제어", "url": "/posts/%ED%98%84%EB%8C%80-%EA%B8%B0%EC%95%84-%EA%B3%84%EA%B8%B0%ED%8C%90-CAN-%EC%8B%A0%ED%98%B8-%EC%A0%9C%EC%96%B4/", "categories": "Projects(Ko), Undergraduate research(Ko)", "tags": "니로, 니로EV, Niro, 계기판, 계기판 제어, 기아 니로, Kia, CAN, C-CAN", "date": "2022-09-11 19:34:01 +0900", "snippet": "준비물 계기판 CAN analyzer(Kvaser Leaf) 12V 파워 서플라이 Xbox 컨트롤러1. 계기판 전원연결계기판 커넥터의 전원 입력 라인을 찾아 12V 출력장치에 물려준다.12V 어댑터에 DC잭을 사용하여 연력하였다.2. C-CAN라인 결선계기판 커넥터의 C-CAN 라인을 찾아 CAN 장비에 연결해준다.차량마다 결선도가 다르므로, 주의하여 결선한다.(High, Low가 바뀌지 않도록 유의)3. 통신속도 설정장비에 맞는 프로그램을 세팅하고 C-CAN의 통신속도인 500kbps로 설정해준다.4. 완성(?)CAN ID값을 찾은 후, 조이스틱에 대응하는 코드를 짜서 완성한다.ID가 차량마다 다르기에, 혹시 모를 오작동이나 불상사가 우려되어 코드는 추후 가공해서 올릴 계획이다." }, { "title": "Niro EV instrument cluster disassembly", "url": "/posts/Niro-EV-instrument-cluster-dissembly/", "categories": "Projects(En), Undergraduate research(En)", "tags": "Niro, Niro EV, EV, Cluster, Cluster removal, cluster disassembly, kia niro, Kia", "date": "2022-09-11 18:34:01 +0900", "snippet": "Note I thought the urethane-coated part was separated like a lid, but it is a whole part with the ‘main crash pad assembly.’ Remove the ‘cluster fascia panel’ include the handle cover connected with the leather part. Remove the plastic part carefully because the top of the ‘cluster fascia panel’ is thin. Unlike the ‘cluster fascia panel’, the ‘instrument cluster’ has two additional screws at the top, requiring a total of four removal." }, { "title": "니로 EV 계기판 탈거", "url": "/posts/%EB%8B%88%EB%A1%9C-EV-%EA%B3%84%EA%B8%B0%ED%8C%90-%ED%83%88%EA%B1%B0/", "categories": "Projects(Ko), Undergraduate research(Ko)", "tags": "니로, 니로EV, Niro, 계기판, 계기판 탈거, 기아 니로, Kia", "date": "2022-09-10 09:34:01 +0900", "snippet": "유의 사항 우레탄 코팅된 부분이 따로 뚜껑처럼 분리되는 줄 알았으나 “메인 크래시 패드 어셈블리”로 통짜 부품이다. 클러스터 페시아 패널은 핸들부분 덮개까지 가죽으로 연결되어 함께 탈거한다. 클러스터 페시아 패널 상단의 플라스틱이 얇으니 주의해서 탈거한다. 클러스터 페시아 패널과는 달리 계기판은 나사가 위쪽에 2개가 더 있어 총 4개를 탈거해야 한다." }, { "title": "커넥티드 카 구현(중단)", "url": "/posts/%EC%BB%A4%EB%84%A5%ED%8B%B0%EB%93%9C-%EC%B9%B4-%EA%B5%AC%ED%98%84(%EC%A4%91%EB%8B%A8)/", "categories": "Projects(Ko), Undergraduate research(Ko)", "tags": "커넥티드 카, 도어액추에이터, 스마트키, 리모트키, 원격잠금, 도어락, ESP8266, 릴레이", "date": "2022-09-04 17:14:01 +0900", "snippet": "과거 잉여 차량을 활용하여 도어 액추에이터를 네트워크를 통해 제어하는 미니 프로젝트를 진행해 보았다.준비물 릴레이 ESP8266 네트워크 제어를 위한 디바이스 전선 노동력GSW상의 배선도를 바탕으로 릴레이를 활용하여 액추에이터에 전원을 주는 원시적인 방법으로 도어 액추에이터를 제어하였으며, 네트워크를 통한 제어를 위하여 ESP8266을 사용하여 릴레이 신호를 컨트롤 할 수 있도록 하였다.최종적인 목표는 전체 도어 열고 닫기, 이후 더 나아가 원격시동까지 도전하려 했던 원대한(?) 꿈이 있었으나…..차량이 돌연 폐차 처리되는 바람에 중단되어 버렸다.그로 인해 제대로 된 데모영상도 없어 업로드를 고민하였으나, 뭐라도 남기고 싶어 유일한 테스트 영상을 찾아내었다.당시엔 이것이 마지막 영상이 될 줄 모르고 찍었기에, 도어트림도 없이 그냥 도어캐치 라인만 움직인다.결론 액추에이터를 전원제어로 제어하는 것은 미련한 짓이다. OBD 단자를 통한 CAN 제어는 시동 OFF 후 일정시간이 지나면 액추에이터 제어가 불가하다. 왜 현대모비스가 키를 직접 눌러주는 키박스 형태의 ‘브링앤티’라는 괴랄한 디지털 키를 출시했는지 알 수 있었다. (뒷광고 아님) 프로젝트는 언제든 터질 수 있으니 자료를 잘 남겨놓자" }, { "title": "NVIDIA Jetson AGX Orin First lookup", "url": "/posts/NVIDIA-Jetson-AGX-Orin-First-lookup/", "categories": "Device Overview, Embedded(En)", "tags": "NVIDIA, ORIN, Jetson, Xavier, jetpack, AGX", "date": "2022-08-28 00:13:01 +0900", "snippet": "#NVIDIA Jetson AGX Orin First lookupI had a very very short time to tear off the package and use Orin.PackagingBecause I didn’t see the package of previous Jetson AGX Xavier, I can’t compare both of them.On my first impression, the packaging seemed like the Apple’s one.AppearenceOn our system, Orin will alter the role of Xavier, so I compared the two things together.Subjectively, Xavier seemed like semi-opened and looks more mechanical, But had disadventage of dust and shock without cover.But Orin, which was fully covered even the PCIe slot, seemed more rigid, and beautiful. (But the PCIe cover disappointed me after a min…)PCI slotOrin has a rigid cover for PCI slot.But after I opened the cover, it was very disappointed.A wireless antenna was connected across the case and the main body.I have no idea how to deal the cover when I use the PCI slootSizeBecause our Xavier has a Type-C hub attached on the side and wider 3d printed feet, I could not compare precisely with Xavier. On my feeling, Orin seemed a slithly big, but the catalog spec says both of their size is same. This maybe the illusion caused from the fully enclosed design.PortsPorts were also slightly different.The most biggest diffrence which made me impossible to boot was the change of display output port. Xavier has HDMI, But orin has DP.Because of this sad news, my post ends in this point.I will try boot and setup with DP cable soon… :(" }, { "title": "NVIDIA Jetson AGX Orin 둘러보기", "url": "/posts/NVIDIA-Jetson-AGX-Orin-%EB%91%98%EB%9F%AC%EB%B3%B4%EA%B8%B0/", "categories": "Device Overview, Embedded(Ko)", "tags": "NVIDIA, ORIN, Jetson, Xavier, jetpack, AGX, 엔비디아, 젯슨", "date": "2022-08-28 00:11:01 +0900", "snippet": "늘 그렇듯이 3D프린터에 일을 주고 나니 Orin을 개봉하고 둘러볼 시간이 아주 잠깐 생겼다.PackagingXavier은 내가 개봉하지 않았기에, 두 제품간의 패키징 비교는 할 수 없지만, Orin의 포장은 마치 애플의 것을 보는 것 같은 기분이 들었다.Appearence우리 시스템에서 Orin은 Xavier의 역할을 대체할 것이기에, 두가지를 나란히 놓고 비교해 보았다.지극히 주관적으로, Xavier는 내부가 보이게 생겨 좀 더 기계적으로 생겼으나 자꾸 뭐가 들어가서 아쉬웠다.하지만 Orin은 껍데기가 예쁘게 잘 씌워져 있어서 그 걱정을 좀 덜수 있을것 같았다.(이 껍데기는 PCI 슬롯도 덮고있었고, 뒤에 가서 골머리를 앓게 한다.)PCI 슬롯Orin은 Xavier와 달리 PCI 슬롯이 튼튼한 커버로 덮여있다.그리고 그걸 열어보고 나서, 몹시 실망스러웠다.대체 왜 무선안테나를 거기 달아놓은 건지…(물론 나머지는 다 금속이라 저 위치가 이해가 가긴 했다.)PCI 슬롯을 쓰게되면 저 달랑이는 커버를 어떻게 처리해야 할 지 감이 잡히지 않았다.사이즈Xavier에 C타입 허브와 3D프린팅 된 발이 달려있어 정확하지는 않지만, Orin이 좀 더 커보였다.(카탈로그 스펙으로는 같다고 한다.)케이스가 덮여서 그렇게 보인듯Ports포트도 살짝 달라졌다.가장 큰 변화이자 내가 부팅을 못해보게 한 포트는 디스플레이였는데, HDMI가 아닌 DP로 구성되어 있었다.그래서 부팅은… 해보지 못하고 얌전히 제자리에 모셔두었다.다음에 기회가 된다면 부팅까지.." }, { "title": "RSID와 OpenCV 활용 출입감지시스템", "url": "/posts/RSID%EC%99%80-OpenCV-%ED%99%9C%EC%9A%A9-%EC%B6%9C%EC%9E%85%EA%B0%90%EC%A7%80%EC%8B%9C%EC%8A%A4%ED%85%9C/", "categories": "Projects(Ko), RealsenseID(Ko)", "tags": "리얼센스, 인텔, 인텔 리얼센스, 얼굴인식, Intel Realsense, RSID, F450, F455, Face authentication, authentication, Face recognition", "date": "2022-08-14 12:34:01 +0900", "snippet": "RealSenseID 활용 출입관리시스템우연찮게 RealSenseID(이하 RSID)를 접할 기회가 있어 이를 활용한 출입관리시스템을 만들어 보았다.코딩이라고는 파이썬 조금밖에 모르는 코린이인지라, 코드가 몹시 비효율적일 수 있으니 단순히 작동방식에 대한 참고용도로만 사용하시길 바란다.준비물 젯슨나노 Intel RealSenseID 리눅스 개발환경 RSID SDK Open CV(선택사항) 약간의 파이썬 지식STEP1. 기본 환경 구축 RSID 펌업 및 연결아래 글을 참고하여 펌업과 연결을 진행한다.# 인텔 RealsenseID F455/F450 첫걸음 RSID 샘플 코드 분석RealSenseID/Samples/python 폴더의 예제코드를 참조STEP2. 얼굴 탐지 코드 작성해당 코드는 얼굴 탐지(OpenCV)-&gt;사용자 인증(RSID)-&gt;문 개방(PWM)의 구조로 이루어져 있기에, 첫번째 단계는 OpenCV를 활용하여 얼굴이 있는지 감지하여야 한다.import numpy as npimport cv2xml = 'haarcascade_frontface.xml'face_cascade = cv2.CascadeClassifier(xml) #사전학습데이터 불러오기cap = cv2.VideoCapture(-1) #카메라 번호(바뀔 수 있음)ret, frame = cap.read()cap.set(3,640)cap.set(4,480)facelen = 0facedelay = 0while(True):ret, frame = cap.read() #카메라에서 프레임 읽어오기frame = cv2.flip(frame, 1) #카메라에서 읽어온 프레임 좌우반전frame = cv2.rotate(frame, cv2.ROTATE_90_CLOCKWISE) #카메라에서 읽어온 프레임 회전해서 표시gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) #cvt color 함수로 gray로 추출faces = face_cascade.detectMultiScale(gray, 1.05, 5) #학습데이터 기반 얼굴 검출(프레임, 스케일팩터, 선두께 지정)facelen = str(len(faces))facelenint=int(facelen)print(\"Number of faces detected: \" + facelen)if len(faces):for (x,y,w,h) in faces:cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0), 5)cv2.imshow('FACEID', frame)#카메라 영상 프레임으로 새창 열어 표시if facelenint != 0:facedelay += 1print('delay')print(facedelay)else:facedelay = 0if facedelay == 10:exec(open(\"RSID_Authenticate.py\").read())facedelay = 0k = cv2.waitKey(30) &amp; 0xffif k == 27: # Esc 키를 누르면 종료breakcap.release()cv2.destroyAllWindows()STEP3. 사용자 식별OpenCV를 통해 얼굴의 존재를 확인한 후, 신원확인을 요하는 얼굴이 있을 경우, RSID를 통해 식별한다.\"\"\"License: Apache 2.0. See LICENSE file in root directory.Copyright(c) 2020-2021 Intel Corporation. All Rights Reserved.\"\"\"import rsid_pyimport timeimport Jetson.GPIO as GPIOSERVO_PIN = 33GPIO.setwarnings(False)GPIO.setmode(GPIO.BOARD)GPIO.setup(SERVO_PIN, GPIO.OUT)pwm = GPIO.PWM(SERVO_PIN, 50)pwm.start((1./18.)*90+2)PORT='/dev/ttyACM0'def on_result(result, user_id):print('on_result', result)if result == rsid_py.AuthenticateStatus.Success:print('Authenticated user:', user_id)exec(open(\"RSID_Unlock.py\").read())print('unlocked')def on_faces(faces, timestamp):print(f'detected {len(faces)} face(s)')for f in faces:print(f'\\tface {f.x},{f.y} {f.w}x{f.h}')if __name__ == '__main__':with rsid_py.FaceAuthenticator(PORT) as f:f.authenticate(on_faces=on_faces, on_result=on_result)STEP4. 문 개폐젯슨 GPIO 핀을 통해 서보모터로 PWM 신호를 주어 문을 개폐한다.import Jetson.GPIO as GPIOimport timeSERVO_PIN = 33GPIO.setwarnings(False)GPIO.setmode(GPIO.BOARD)GPIO.setup(SERVO_PIN, GPIO.OUT)pwm = GPIO.PWM(SERVO_PIN, 50)pwm.start((1./18.)*90+2)for i in range(0, 20):pwm.ChangeDutyCycle((1./18.)*100+2)time.sleep(0.02)pwm.ChangeDutyCycle(3.0)time.sleep(1.0)pwm.ChangeDutyCycle(0.0)pwm.stop()GPIO.cleanup()" }, { "title": "니로 EV 범퍼&헤드라이트 탈거", "url": "/posts/%EB%8B%88%EB%A1%9C-EV-%EB%B2%94%ED%8D%BC-%ED%83%88%EA%B1%B0/", "categories": "Projects(Ko), Undergraduate research(Ko)", "tags": "니로, 니로EV, Niro, 범퍼, 범퍼 탈거, 헤드라이트 탈거, 기아 니로, Kia", "date": "2022-07-17 18:34:01 +0900", "snippet": "유의 사항 범퍼 탈거 전 충전도어와 충전캡을 꼭 열어놓고 작업할 것.(커넥터는 차체에, 도어와 캡은 범퍼에 고정되어 있음.) 휠하우스 내 화스너가 모두 제거되었는지 꼭 확인할 것. 액티브 셔터를 손잡이처럼 잡고 탈거하던 아이오닉 EV와 달리 마땅히 잡을 곳이 없으니 장갑을 끼고 조심히 탈거할 것. 까먹지 말고 탈착 전 우측 범퍼 커넥터를 탈거, 장착 전 커넥터를 장착 할것. 범퍼 탈거를 위해 헤드라이트를 분해해야 하는 것은 아님. 이번은 그냥 휠하우스 쪽 작업을 위해 탈거했음." }, { "title": "Niro EV bumper & headlight removal", "url": "/posts/Niro-EV-bumper-&-headlight-removal/", "categories": "Projects(En), Undergraduate research(En)", "tags": "Niro, Niro EV, EV, bumper, bumper removal, bumper disassembly, headlight, kia niro, Kia", "date": "2022-07-17 18:34:01 +0900", "snippet": "Note Open the charging door and connector cap before removing the bumper. (Charging connector is attached to chassis, But charging door and cap are attached on the bumper.) Check that all the fasteners in the wheel house removed. Unlike Ioniq EV, which can remove the bumper easily by grabbing the active shutter, the Niro EV has no convenient grabbing point, so make sure to wear a glove and be careful. Do not forget to disconnect and connect the bumper harness connector, which is located on the right side of the bumper before removing and assembling the bumper Removal of the headlight is not essential. In this case, they were removed for work on the wheelhouse." }, { "title": "우분투 기본 실행 프로그램 설정", "url": "/posts/%EC%9A%B0%EB%B6%84%ED%88%AC-%EA%B8%B0%EB%B3%B8-%EC%8B%A4%ED%96%89-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%84%A4%EC%A0%95/", "categories": "Linux, (Ko)", "tags": "리눅스, 우분투, 기본프로그램, 파이썬, Vscode, 우분투 20.04", "date": "2022-07-12 00:13:01 +0900", "snippet": "우분투 기본 실행 프로그램 설정리눅스에서 파이썬 파일을 더블클릭해서 실행하면 텍스트 에디터로 열려 매번 VScode로 열기를 해 줘야 하는 불편함이 있었다.설정에 기본 프로그램 설정 탭이 있었으나, 클릭해도 다른 프로그램이 나오지 않아 아무런 도움이 되지 않았다.해결법은 간단하다. 우클릭 해서 속성을 연다 세가지 메뉴 중 가장 우측의 open with.. 를 누른다 열기를 원하는 어플리케이션을 누르고, Set as default로 기본프로그램으로 지정한다. 끝Ps. 이럴거면 설정에 있는 기본 프로그램은 도대체 왜 존재하는걸까." }, { "title": "Ubuntu default program setting", "url": "/posts/Ubuntu-default-program-setting/", "categories": "Linux, (En)", "tags": "Linux, Ubuntu, Default program, python, Vscode, ubuntu 20.04", "date": "2022-07-12 00:13:01 +0900", "snippet": "To open the python file on the Linux system, there was inconvenient to open with Vscode because ubuntu basically opened the file with a text editor.There was a default program setting tab, but it was meaningless because there was no other option in the checklist.The solution is simple Right-click on the file and open the properties Click the open with… option, which is on the right side of the three options. Click the application which you want to open with, and Set the program to default with the Set as default button. 끝Ps. I can not understand why the default program option in the setting exists." }, { "title": "인텔 RealsenseID F455/F450 첫걸음", "url": "/posts/%EC%9D%B8%ED%85%94-RealsenseID-F455,F450-%EC%B2%AB%EA%B1%B8%EC%9D%8C/", "categories": "Projects(Ko), RealsenseID(Ko)", "tags": "리얼센스, 인텔, 인텔 리얼센스, 얼굴인식, Intel Realsense, RSID, F450, F455, Face authentication, authentication, Face recognition", "date": "2022-07-10 21:34:01 +0900", "snippet": "Step 1. 인텔 리얼센스 제품군 중 얼굴인식에 특화된 RealSenseID(이하 RSID) 캠을 사용해 보게 되었다.일반적으로 사용되는 Intel realsense SDK는 RSID에서는 사용할 수 없었다.이 RSID 사용을 위해서는 아래 주소에서 전용의 SDK를 다운받아야 한다.git clone https://github.com/IntelRealSense/RealSenseID.git정상적으로 설치가 끝났다면, 아래의 명령을 통해 간단히 실행해 볼 수 있다.cd RealSenseID/build/bin./rsid-cli /dev/ttyACM0주의사항 보안을 위한 Secured 옵션은 RSID기기에 귀속되는 설정인지, 해당 옵션을 한번 활성화 하면 장치를 분리 후 다른 PC에 연결하면 벽돌이 되어버린다. 반드시 장치를 제거하기 전에 Secured 옵션을 해제 한 후 분리하여야 삽질을 면할 수 있을 것이다.시행착오 $ [PacketSender] Got invalid crc. Expected: 561. Actual: 20100 error : USB 접근 권한이 부여되지 않아서 발생. -&gt; $ sudo chmod 666 /dev/ttyACM0 $ “Firmware cannot be updated directly to the chosen version.Flash firmware version 3.1.#.# first.Firmware cannot be updated directly to the chosen version.Flash firmware version 3.1.#.# first.” : RSID의 펌웨어는 2에서 4버전으로 바로 업데이트 할 수 없다. 3점대 버전을 거쳐서 4버전으로 업데이트를 진행하자. 펌웨어 SKU 버전 선택 : RSID의 펌웨어는 SKU1과 SKU2로 나뉘는데, 그냥 하나 해보고 안되면 다른 걸 해도 되는 것 같지만, 본인은 겁이 많았기에 맞는 것을 찾아 설치하였다.구별방법은 간편한데, 자신의 다바이스가 아래와 같은 형태의 SN을 가지면 120X6228XXXXXXXXXXXXXXXX-X XX 122X6228XXXXXXXXXXXXXXXX-XXX XXXX6229XXXXXXXXXXXXXXXX-XXX SKU2 버전을 설치하면 된다. 만약 이 기기를 openCV와 함께 사용할때, 카메라 번호를 0이나 1로 지정해도 잡히지 않는 경우, -1을 시도해보자. 음의 정수는 안되는 줄 알았는데, 필자의 경우 -1에서 작동하였다. Cannot find rsid.so : build/lib 폴더를 찾아보면 찾을 수 있을 것이다." }, { "title": "Simple tutorial for Intel RealsenseID F455/F450", "url": "/posts/How-to-use-Intel-RealsenseID-F455,F450/", "categories": "Projects(En), RealsenseID(En)", "tags": "Intel Realsense, RSID, F450, F455, Face authentication, authentication, Face recognition", "date": "2022-07-10 13:34:11 +0900", "snippet": "It seemed that the general ‘Intel realsense SDK’ is not compatible with RealSenseID(after this, referred to as RSID)So we need to use RSID SDK from https://github.com/IntelRealSense/RealSenseIDStep 1.Clone the package.git clone https://github.com/IntelRealSense/RealSenseID.gitStep 2.Move to foldercd RealSenseIDStep 3.Make build dirmkdir build &amp;&amp; cd buildStep 4.Cmake with preview optioncmake .. -DRSID_PREVIEW=1Step 5.Makemake -j16Step 6.We can operate RSIDcd RealSenseID/build/bin./rsid-cli /dev/ttyACM0Wanna use GUI?Move to samples folder and run viewer.pycd RealsenseID/samples/pythonpython3 viewer.pyNote Be careful when you use the Secured option. It remains on the RSID device and cannot work with other pc. Make sure that you disable the Secured option before unplugging.Trouble Shooting $ [PacketSender] Got invalid crc. Expected: 561. Actual: 20100 error : Need to give permission to access to sub -&gt; run sudo chmod 666 /dev/ttyACM0 ‘can’t open device “/dev/ttyACM0”: Device or resource busy’ -&gt; sudo usermod -a -G dialout USERNAME $ “Firmware cannot be updated directly to the chosen version.Flash firmware version 3.1.#.# first. Firmware cannot be updated directly to the chosen version.Flash firmware version 3.1.#.# first.” -&gt; We cannot update the RSID firmware 2.x to 4.x directly, so we need to update 2.x -&gt; 3.1.x -&gt; 4.x The SKU version of the Firmware: There are two variations in the same version. SKU1 and 2. -&gt; We need to Check the serial number. If our RSID’s serial number consisted with:120X6228XXXXXXXXXXXXXXXX-X\tXX122X6228XXXXXXXXXXXXXXXX-XXXXXXX6229XXXXXXXXXXXXXXXX-XXXWe need to use SKU2 version. I was the first case. If you use OpenCV with RSID, the camera number may be -1 Cannot find rsid.so : check build/lib folder" }, { "title": "Web 스터디-6. JavaScript", "url": "/posts/Web-%EC%8A%A4%ED%84%B0%EB%94%94-6.-JavaScript/", "categories": "Study, Web", "tags": "HTML, Web, 웹, JavaScript, 자바스크립트", "date": "2022-07-10 12:34:01 +0900", "snippet": "&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script&gt; Math.random() //랜덤숫자 alert('경고창') confirm('확인취소창') prompt('입력받기') alert(prompt('입력값 계산')*0.1) alert('계산값 횔용'+prompt('결과')*0.1) document.querySelector('body') // 특정 태그 선택 document.querySelector('body').remove // 선택된 태그 삭제 -&gt; 파일을 건드리진 않았으므로 새로고침하면 돌아옴 document.querySelector('body').style.backgroundColor='black'; //다크모드-&gt;바디 영역을 블랙으로 바꾼다. document.querySelector('body').style.color='white'; //폰트 색 바꾸기 document.location.href; //document라는 객체로 구분되어 기능을 정의-&gt; 중복의 위험성을 최소화 &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt;ㅡㅡㅡㅡㅡㅡㅡㅡㅡ적용예ㅡㅡㅡㅡㅡㅡㅡㅡㅡ&lt;!DOCTYPE html&gt; Document " }, { "title": "Web 스터디-5. 폰트 가져오기", "url": "/posts/Web-%EC%8A%A4%ED%84%B0%EB%94%94-5.-%ED%8F%B0%ED%8A%B8-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0/", "categories": "Study, Web", "tags": "HTML, Web, 웹, Font, 폰트", "date": "2022-07-10 12:34:01 +0900", "snippet": "&lt;html&gt;&lt;head&gt;&lt;title&gt;WEB!!&lt;/title&gt;&lt;meta charset=\"utf-8\"&gt;&lt;style&gt; @import url('https://fonts.googleapis.com/css2?family=Fascinate&amp;display=swap'); h1 a{ text-decoration: none; font-family: 'Fascinate', cursive; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;&lt;a href=\"index.html\"&gt;Online-Font&lt;/a&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;ㅡㅡㅡㅡㅡㅡㅡㅡㅡ적용예ㅡㅡㅡㅡㅡㅡㅡㅡㅡWEB!!Online-Font" }, { "title": "Web 스터디-4. CSS영역", "url": "/posts/Web-%EC%8A%A4%ED%84%B0%EB%94%94-4.-CSS%EC%98%81%EC%97%AD/", "categories": "Study, Web", "tags": "HTML, Web, 웹, CSS", "date": "2022-07-10 12:34:01 +0900", "snippet": "&lt;html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; div{ border: 5px solid green; } #container{ display: grid; grid-template-columns: 100px 1fr 80px; /* 클래스 내에 있는거를 각각 사이즈 지정(fr 사용시에는 비례하게 또는 채워서 지정 가능) */ } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;gird&lt;/h1&gt; &lt;div&gt;TOP&lt;/div&gt; &lt;div id=\"container\"&gt; &lt;div&gt;LEFT&lt;/div&gt; &lt;div&gt;CENTER&lt;/div&gt; &lt;div&gt;RIGHT&lt;/div&gt; &lt;/div&gt; &lt;div&gt;BOTTOM&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;&lt;/html&gt;ㅡㅡㅡㅡㅡㅡㅡㅡㅡ적용예ㅡㅡㅡㅡㅡㅡㅡㅡㅡ gird TOP LEFT CENTER RIGHT BOTTOM " }, { "title": "Web 스터디-3. 데이터 타입", "url": "/posts/Web-%EC%8A%A4%ED%84%B0%EB%94%94-3.-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85/", "categories": "Study, Web", "tags": "HTML, Web, 웹, JavaScript, 데이터 타입, Datatype", "date": "2022-07-10 12:34:01 +0900", "snippet": "&lt;html&gt; &lt;body&gt; &lt;h1&gt;Datatype&lt;/h1&gt; &lt;h2&gt;Number&lt;/h2&gt; &lt;script&gt; document.write(1); document.write('&lt;br&gt;'); document.write(1+1); document.write('&lt;br&gt;'); document.write(1-1); document.write('&lt;br&gt;'); document.write(2*2); document.write('&lt;br&gt;'); document.write(4/2); document.write('&lt;br&gt;'); document.write(Math.PI); //math 에 내장된 원주율값 document.write('&lt;br&gt;'); document.write(Math.floor(1.9)); //math 내장 floor(내림)값 가져오기 document.write('&lt;br&gt;'); &lt;/script&gt; &lt;h2&gt;문자열 (string)&lt;/h2&gt; &lt;script&gt; document.write('hello'); document.write('&lt;br&gt;'); document.write(\"hello\"); document.write('&lt;br&gt;'); document.write('hello \\ world'); // \\쓰면 코드 내려서 쓰겠다는 의미(실제 결과물에는 반영 안됨) document.write('&lt;br&gt;'); document.write('hello world'.length); // 글자수 값 가져와서 쓰기 document.write('&lt;br&gt;'); document.write('hell world'.replace('hell', 'hello')); // 문장 속 특정단어 바꾸기 document.write('hell world'.replaceAll('hell', 'hello')); // 문장 속 특정단어 모두 바꾸기 document.write('&lt;br&gt;'); document.write('&lt;br&gt;'); document.write('hello' + 'world'); // 결합연산자 &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;ㅡㅡㅡㅡㅡㅡㅡㅡㅡ적용예ㅡㅡㅡㅡㅡㅡㅡㅡㅡ Datatype Number 문자열 (string) " }, { "title": "Web 스터디-2. 배열, 반복문", "url": "/posts/Web-%EC%8A%A4%ED%84%B0%EB%94%94-2.-%EB%B0%B0%EC%97%B4,-%EB%B0%98%EB%B3%B5%EB%AC%B8/", "categories": "Study, Web", "tags": "HTML, Web, JavaScript 웹, 배열, 반복문", "date": "2022-07-10 12:34:01 +0900", "snippet": "&lt;html&gt; &lt;body&gt; &lt;h1&gt;배열 - Array&lt;/h1&gt; &lt;script&gt; let number = ['1', '2', '3'] document.write('배열의 첫번째 데이터는 '+number[0]); document.write('&lt;br&gt;'); document.write('배열의 두번째 데이터는 '+number[1]); document.write('&lt;br&gt;'); document.write('배열의 길이는 '+number.length); document.write('&lt;br&gt;'); document.write(number.push('데이터 추가')); document.write('&lt;br&gt;'); document.write(number); document.write('&lt;br&gt;'); document.write(number.join('연결')); &lt;/script&gt; &lt;h1&gt;반복문 - loop, iterate&lt;/h1&gt; &lt;script&gt; document.write('전'); document.write('&lt;br&gt;'); for(let i=0; i&lt;3; i=i+1){ document.write('루프'); document.write('&lt;br&gt;'); } document.write('후'); &lt;/script&gt; &lt;h1&gt;Array + Loop&lt;/h1&gt; &lt;script&gt; let number2 = ['5', '6', '7', '8']; for(let i=0; i&lt;number2.length; i=i+1){ document.write((i+1)+'번째 루프'); document.write('값:') document.write(number2[i]); // 배열의 데이터를 순차적으로 출력 document.write('&lt;br&gt;') } &lt;/script&gt; &lt;h1&gt;활용예-버튼만들고 모두 클릭하기&lt;/h1&gt; &lt;script&gt; var tag = ''; for(var i=0; i&lt;1000; i++){ tag = tag + `&lt;input type=\"button\" onclick=\" this.style.backgroundColor='red'; \" value=\"press\"&gt;` } document.write(tag); let inputs =document.querySelectorAll('input'); for(let i=0; i&lt;inputs.length; i=i+1){ console.log(inputs[i]); inputs[i].click('') } &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;ㅡㅡㅡㅡㅡㅡㅡㅡㅡ적용예ㅡㅡㅡㅡㅡㅡㅡㅡㅡ 배열 - Array 반복문 - loop, iterate Array + Loop 활용예-버튼만들고 모두 클릭하기 " }, { "title": "Web 스터디-1. HTML 파일 구조.", "url": "/posts/Web-%EC%8A%A4%ED%84%B0%EB%94%94-1.-HTML-%ED%8C%8C%EC%9D%BC-%EA%B5%AC%EC%A1%B0,-%EB%A7%81%ED%81%AC%EA%B1%B8%EA%B8%B0/", "categories": "Study, Web", "tags": "HTML, Web, 웹, HTML 리스트, HTML 링크걸기", "date": "2022-07-10 12:34:01 +0900", "snippet": "&lt;!DOCTYPE html&gt;&lt;!--html임을 정의--&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt;&lt;!--깨짐을 방지/ title와 함께 head로 맨위에 위치--&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;!--본격적인 본문--&gt; &lt;!--인터넷과 웹의 관계: 인터넷을 구성하는 서비스 중 하나가 웹이다.--&gt; &lt;!--인터넷+하이퍼텍스트+마크업언어=&gt;웹(팀 버너스리)--&gt; &lt;!--ip를 외우기 어려워지자 도메인을 만듦(최초의 도메인 info.cern.ch)--&gt; &lt;!--인터넷을 구성하기 위해서는 최소 두대 PC 필요, 정보를 요청하는 PC가 클라이언트, 응답하는 웹서버가 서버 각각의 장치를 host--&gt; &lt;!--127.0.0.1 : 내 내부 아이피--&gt; &lt;!--서버를 운영하기 위해 인터넷에 접속된 컴퓨터를 운영하는 것을 호스팅이라 한다--&gt; &lt;!--코드 자동정렬 shift+alt+f / ubuntu ctrl+shift+f--&gt; HTML 실습 &lt;u&gt;밑줄 그어보기&lt;/u&gt; &lt;!--밑줄--&gt; &lt;!-- html 주석 단축키는 ctrl+/ --&gt; &lt;br&gt; &lt;!--줄바꿈--&gt; HTML 실습 &lt;strong&gt;글자 진하게 강조하기&lt;/strong&gt;&lt;!--진하게--&gt; &lt;br&gt; &lt;!--줄바꿈--&gt; 이렇듯 &lt;&gt;를 사용하는 것들을 &lt;strong&gt;\"tag\"&lt;/strong&gt;라고 한다 &lt;br&gt; &lt;!--줄바꿈--&gt; &lt;br&gt; &lt;!--줄바꿈--&gt; HTML 실습 &lt;h1&gt;제목태그 h1 사용하기&lt;/h1&gt; &lt;!--제목태그--&gt; &lt;h2&gt;제목태그 h2 사용하기&lt;/h2&gt; &lt;!--제목태그--&gt; &lt;h3&gt;제목태그 h3 사용하기&lt;/h3&gt; &lt;!--제목태그--&gt; &lt;h4&gt;제목태그 h4 사용하기&lt;/h4&gt; &lt;!--제목태그--&gt; &lt;h5&gt;제목태그 h5 사용하기&lt;/h5&gt; &lt;!--제목태그--&gt; &lt;h6&gt;제목태그 h6 사용하기&lt;/h6&gt; &lt;!--제목태그--&gt; &lt;br&gt; &lt;!--줄바꿈--&gt; &lt;img src=\"https://images.unsplash.com/photo-1542831371-29b0f74f9713?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1170&amp;q=80\" alt=\"HTML실습 이미지 삽입하기\" width=\"300\" height=\"300\"&gt; &lt;!--이미지 뒤에 붙는건 속성(attribute)--&gt; &lt;!--vscode 설정 단축키는 'ctrl'+','--&gt; &lt;iframe width=\"560\" height=\"315\" alt=\"HTML 실습 유튜브 삽입하기\" src=\"https://www.youtube.com/embed/1fWc6dNKBUo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt; &lt;br&gt; &lt;a href=\"reason-rock.github.io/\"&gt;링크걸기&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"1.html\"&gt;페이지 내 링크 이동&lt;/a&gt;&lt;/li&gt;&lt;!--페이지 나누기--&gt; &lt;li&gt;&lt;a href=\"css1.html\"&gt;내부이동 css&lt;/a&gt;&lt;/li&gt;&lt;!--페이지 나누기--&gt; &lt;li&gt;&lt;font color=\"red\"&gt;리스트2&lt;/font&gt;&lt;/li&gt;&lt;!--색상변경-&gt;지원안될수 있음 =&gt; CSS로 변화되기 전 원시적 방법--&gt; &lt;li&gt;리스트3&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li&gt;다른 리스트1&lt;/li&gt; &lt;li&gt;다른 리스트2&lt;/li&gt; &lt;li&gt;다른 리스트3&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;ㅡㅡㅡㅡㅡㅡㅡㅡㅡ적용예ㅡㅡㅡㅡㅡㅡㅡㅡㅡ HTML 실습 밑줄 그어보기 HTML 실습 글자 진하게 강조하기 이렇듯 &lt;&gt;를 사용하는 것들을 \"tag\"라고 한다 HTML 실습 제목태그 h1 사용하기 제목태그 h2 사용하기 제목태그 h3 사용하기 제목태그 h4 사용하기 제목태그 h5 사용하기 제목태그 h6 사용하기 링크걸기 페이지 내 링크 이동 내부이동 css 리스트2 리스트3 다른 리스트1 다른 리스트2 다른 리스트3 " }, { "title": "Jekyll-Chripy 테마 활용 깃허브 블로그 만들기-2", "url": "/posts/Jekyll-Chripy-%ED%85%8C%EB%A7%88-%ED%99%9C%EC%9A%A9-%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-2/", "categories": "Projects(Ko), GitHub Blog(Ko)", "tags": "깃허브, 블로그, 깃블로그, 깃허브 블로그, Jekyll, Chripy, Jekyll-Chirpy", "date": "2022-07-10 10:53:12 +0900", "snippet": "Jekyll-Chripy 테마 활용 깃허브 블로그 만들기-2Step 0. 복습저번 게시글에서는 호스팅을 위한 환경을 구축하였고, 내부망에서 블로그가 작동함을 확인할 수 있었다. 이번 게시글에서는 이렇게 작동하는 블로그를 내 입맛대로 수정하는 것에 대해 다룰 것이다.놀랍게도 본인은 이 부분을 우습게 봤다가 매우 사소한 문제로 2개월 이상을 날린 바가 있다. 자신만의 블로그를 만들기 위해서는 어떻게 해야 할까?Step 1. 데모 파일 삭제데모 파일들을 지움으로써 그 첫걸음을 내딛는 것은 나쁘지 않은 생각이다. 다만, 그 데모 파일들을 하나하나 읽은 후 진행하는 것이 미래의 나에게 많은 도움을 줄 것이다.특히 각 게시글의 최상단에 위치한 이 문단을 우습게 보았다가 2달동안 고생하였다. (눈물의 구글링에서 나와 같은 사례가 보이지 않던 것으로 보아 그냥 내가 멍청했던걸로…)---title: Text and Typographyauthor: cotesdate: 2019-08-08 11:33:00 +0800categories: [Blogging, Demo]tags: [typography]math: truemermaid: trueimage: path: /commons/devices-mockup.png width: 800 height: 500 alt: Responsive rendering of Chirpy theme on multiple devices.---이 문단은 게시글에 대한 전반적인 정보를 담고 있다. 상당히 직관적이라 크게 설명할 부분이 없는데, 여기서 중요한 것은 이 문단이 “무조건” 제일 위에 위치해야 한다는 것이다. 공백이라도 첫째 줄에 있으면 이 문단은 정상적으로 작동하지 않는다!!나는 맨 위에 타이틀을 따로 넣어놓고 한달동안 삽질을 했고, 타이틀을 지우고 별 생각없이 그걸 공백으로 둔채로 한달동안 더 삽질을 지속했다…..잡설은 여기서 마무리 하고 각각의 포스트를 통해 글 작성 구조를 파악한 후에는 4개의 포스트를 모두 삭제하면 된다.그 후 본격적으로 config 파일 수정을 통해 나만의 블로그를 구축할 수 있게 된다.Step 2. config 파일 수정_config.yml 파일을 열어보면 친절한 주석과 항목명 덕분에 대충 무엇을 수정해야 할 지 알 수 있다.대표적인 것들에는 lang -&gt; 한국어를 공식지원하지 않는 것 같다. en으로 가만히 두어도, ko로 바꿔도 정상동작하니 취향껏 설정하자. timezone -&gt;우리나라 표준시인 Asia/Seoul로 변경 title -&gt; 본인이 원하는 블로그 제목 tagline -&gt; 본인이 원하는 블로그 부제, 설명 description -&gt; 구글 검색엔진에 대해 자신의 블로그 소개글? 아무튼 원하는대로.. url -&gt; 깃허브 페이지 기능을 쓰면 비워놓아도 되는 것 같다. 다른 도메인의 경우 작성해야할듯. github -&gt; 깃허브 아이디(나머지 SNS 등의 항목도 눈치껏 이렇게 작성) avatar -&gt; 블로그 좌측 프로필 사진 경로 toc -&gt; 포스팅된 글 우측에 목차 여부(T/F) paginate -&gt; 페이지당 표시 글 수정도만 수정하면 그럴듯한 나만의 블로그를 만들 수 있다. 이때 tagline이 블로그 제목 밑의 부제이고, description이 검색엔진에 검색되는 키워드 개념임에 유의하자.본인은 항목명만 보고 tag가 검색키워드, description이 부제인 줄 알고 반대로 입력했었다.(삽질이란 삽질은 다 하는듯..)Step 3. 포스트 작성블로그를 열심히 꾸미고 정작 글을 올리지 않으면 그 블로그는 아무런 의미가 없을 것이다.이제부터는 그 중요한 글 쓰기에 대해 다뤄볼 것이다.먼저 각각의 포스트가 될 마크다운 파일을 하나 생성한다. 제목 양식은 ‘XXXX-XX-XX-블로그 제목,md’상술한 생생한 삽질의 교훈을 따라, 무조건 제일 윗줄에 어떠한 공백도 용납하지 않고 아래의 양식을 복붙하자.---title: Text and Typographyauthor: cotesdate: 2019-08-08 11:33:00 +0800categories: [Blogging, Demo]tags: [typography]math: truemermaid: trueimage: path: /commons/devices-mockup.png width: 800 height: 500 alt: Responsive rendering of Chirpy theme on multiple devices.--- title는 제목이다. author는 글쓴이이다. date는 날짜이다. +뒤에 붙는 숫자가 중요하다. 뒤의 숫자는 시간대를 조절하는 것인데, 우리가 config 파일에서 설정했던 Asia/Seoul의 경우 +09:00 이므로 그대로 입력해주면 된다. *이게 설정되지 않으면 글 쓰자마자 올릴 때 시차 내로 차이가 나게 되면 Skipping: _posts/XXXX-XX-XX-제목.md has a future date 에러가 뜨며 자동으로 해당 글을 스킵해버린다. categories는 [메인카테고리, 서브카테고리] 의 형태로 기입한다. 정상적으로 기입했으면 자동으로 카테고리가 생길 것이다. tags는 태그이다. 태그 또한 정상적으로 기입하면 자동으로 태그가 생성될것이다.여기까지 작성하면 기본적인 글을 위한 요소들은 모두 완성되었다. 아래의 조건들은 필요에 따라 추가하고, 필요 없을 시에는 제거해도 무방하다.그 아래에 이제 자유롭게 쓰고 싶은 글을 쓰면 된다. 마크다운 문법을 활용하면 조금 더 가독성 높고 더 멋진 글을 쓸 수 있을 것이다." }, { "title": "Jekyll-Chripy 테마 활용 깃허브 블로그 만들기-1", "url": "/posts/Jekyll-Chripy-%ED%85%8C%EB%A7%88-%ED%99%9C%EC%9A%A9-%EA%B9%83%ED%97%88%EB%B8%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/", "categories": "Projects(Ko), GitHub Blog(Ko)", "tags": "깃허브, 블로그, 깃블로그, 깃허브 블로그, Jekyll, Chripy, Jekyll-Chirpy", "date": "2022-07-10 10:53:11 +0900", "snippet": "Jekyll-Chripy 테마 활용 깃허브 블로그 만들기연초에 깃허브 계정을 만든 후 아직까지 깃허브에 올릴만한 수준의 코드를 짜지 못해 먼저 깃허브 블로그부터 만들어보자라고 생각했던 것이 벌써 6월이 되었다. 미루고 미루다 틈틈히 도전해보았지만, 남들은 그렇게 쉽다던 블로그는 온갖 에러를 토해내며 날 놓아주지 않았다. 이는 필시 본인이 벼락치기로 웹을 공부했기 때문일 것이다.(아니다) 아직도 깃허브 휴지통을 살펴보면 수없이 많은 실패한 블로그 레포들이 나를 반겨준다. 깃허브 블로그를 위해서는 ruby, jekyll,bundler 그리고 사용할 테마가 필요하다.이번 설치에서는 Chirpy 테마를 사용한다.https://github.com/cotes2020/jekyll-theme-chirpy ruby 설치 sudo apt install ruby jekyll과 bundler 설치(*설치중에 permission error 발생시 sudo로 해결한다.) gem install jekyll bundler 사용할 테마 가져오기 (fork, starter 같은 더 쉬운 방법들도 있다고 한다. 이왕 하는 거 제대로 해 보겠다고 덤볐다가 6개월이 가버리는 일이 있으니 저 방법도 추천한다.) git clone https://github.com/cotes2020/jekyll-theme-chirpy.git 여기까지 따라왔으면 절반은 성공한 것이다. 이제 모든 환경을 구축한 것 같으니 신이나서 jekyll serve 를 입력하게 되면 뭔가 긴 에러가 발생하게 된다. bundler 사용 bundler jekyll serve를 통해 내부망에서 작동 확인 jekyll serve 정상적으로 진행되었으면 아래와 같은 화면을 볼 수 있을 것이다. 터미널 상의 Server adress로 접속하면 데모 창을 확인할 수 있다. 여기까지 진행하였으면, 최소한의 테마 설치와 기본적 환경구축이 끝이 났다고 볼 수 있다.이제 테마 커스터마이징, 깃허브 배포를 통해 이 대서사를 마무리 지을 수 있을 것이다." }, { "title": "DIY hub for Home Assistant system.", "url": "/posts/DIY-hub-for-Home-Assistant-system/", "categories": "Projects(En), IoT(En)", "tags": "3D printing, 3D modeling, Iot, HA, Home Assistant, Nest Hub, Google home", "date": "2022-06-26 14:57:10 +0900", "snippet": "Although I established Google home voice control with Home assistant, I realized the need of intuitive touch control system.The Nest Hub was Ideal, but my wallet is so empty that I should DIY.This is the story about making HA Hub with an old smartphone and 3D printing.Required materials An old smart phone in your drawer An old PLA filament(only for me) A little bit of 3D modling ability Already established HA server A phone charger with broken connectorSTEP1. Modification of Smartphone Install newer OS in your phone(Optional)In my case, the target of this modification was Vega No’6, which has android 4.4.2, So I need to update the version up to 7 to install the HA app.(Of course, you can operate with the web, but it’s not cool.)The detailed updating process will be written in another post Permanent power input modification.(Optional)(For battery-detachable phones.)As I wrote before, my phone was old, so I decided to remove battery to prevent swelling and other bad events.(Also possible just connect your charger always without these step.)        1. Detach the battery, remove the Cell and just take BMS        2. Cut the old charger’s broken connector and solder to bms beware with the electrical polarity        3. Fill the empty remaining space of cell to BMS got original position.         Install HA app.STEP2. Design your custom hub frame Model your phone to design the angle roughly. Tried to design the model similar to the other hubs, hide the frame, expose only LCD, and set the angle about 45 degrees to control easily.☆NOTE: Take note that you need to make space for the power and volume switch not to be pressed. Otherwise, you can see the phone turns off periodically without a specific reason. And send meaningless time just suspecting the innocent charger and soldered spot. In addition, your precious printed frame will go to the garbage can.STEP3. The end Join the phone and frame you made, the DIY hub project is over. Go to your HA server and make a new dashboard and customized layout. Congratulations! Now you can have your own hub with customized design.☆Question: To achieve the same goal, why don’t we just put the phone on a wireless charging stand?☆Answer: That’s right. But isn’t ours more cool? A little sense of accomplishment is a bonus. :D" }, { "title": "Home Assistant를 위한 DIY 허브 만들기", "url": "/posts/Home-Assistant%EB%A5%BC-%EC%9C%84%ED%95%9C-DIY-%ED%97%88%EB%B8%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0/", "categories": "Projects(Ko), IoT(Ko)", "tags": "3D프린팅, 3D모델링, Iot, HA, Home Assistant, 스마트폰 상시전원 개조, 상시전원, 스마트폰, 스마트폰 배터리, 네스트 허브, 홈어시스턴트", "date": "2022-06-26 10:57:10 +0900", "snippet": "HA를 구축하고 구글홈 음성인식까지 연동하였으나 직관적인 제어는 역시 터치가 편하다는 것을 느끼고, 네스트 허브를 살지 말지 고민하다 직접 만들어보기로 했다.준비물 서랍에 굴러다니는 공기계 3년 묵은 3D프린터 필라멘트 약간의 모델링 능력 이미 구축된 HA 서버 커넥터가 망가진 케이블 일체형 스마트폰 충전기STEP1. 스마트폰 환경 구성 스마트폰에 최신 OS 설치(선택사항)이번 개조의 희생양을 베가넘버6로 잡았기에, 안드로이드 4.4.2를 최소 7이상으로 올려야 HA 공식 앱을 설치 할 수 있었다.(물론 그냥 웹으로 구동해도 상관없다.)자세한 과정은 별도의 글로 다룰 예정 스마트폰 상시전원 개조(선택사항)(탈착식 스마폰에만 권장)이 또한 노후된 기기이므로 애초에 배터리 상태가 좋지않아, 스웰링 방지를 위해 배터리를 제거하기로 결정했다.(물론 충전기를 상시로 연결해놓아도 상관없다)        1. 배터리 분리 후 셀과 BMS 분리        2. BMS에 극성을 맞춰 5V 충전기 납땜        3. 셀의 빈 공간을 채워 BMS가 본체 접점에 잘 맞물리도록 배치         HA 공식 앱 설치STEP2. 허브 프레임 설계 먼저 사용하려는 휴대폰을 대략적으로 모델링해서 대략적인 형상을 잡는다. 최대한 허브와 비슷한 형상을 내기 위해 배젤을 가리고, 액정만 보이면서 45도 각도로 사용성을 극대화하기 위해 노력했다.☆유의사항: 전원과 볼륨키를 위한 공간을 확보해야 함을 유의하라. 그렇지 않으면 출력후 장착했을때 이유없이 전원이 꺼지는 걸 보고 애꿎은 충전기와 땜질 탓을 하며 허송세월을 보내고, 소중한 출력물 하나를 버리게 될 것이다.STEP3. 출력 및 장착 앞에서 만든 스마트폰과 허브 프레임을 결합하면 간단한 허브 만들기는 이렇게 끝이 난다. 이제 HA에 접속하여 허브를 위한 대시보드를 새로 만들어 커스터마이징 해주면 네스트 허브 부럽지 않은 HA전용 허브를 가질 수 있을 것이다.☆질문: 이럴거면 그냥 공기계를 무선충전거치대에 올려두면 되는거 아닌가?☆답변: 맞다. 그치만 조금 더 폼나지 않는가? 약간의 성취감은 덤이다." }, { "title": "Vscode에서 한글입력 안될때", "url": "/posts/Vscode%EC%97%90%EC%84%9C-%ED%95%9C%EA%B8%80%EC%9E%85%EB%A0%A5-%EC%95%88%EB%90%A0%EB%95%8C/", "categories": "Linux, (Ko)", "tags": "Vscode, 한글입력, 인코딩, Vscode 설치, deb 설치, snap 설치, 재설치", "date": "2022-06-10 13:34:11 +0900", "snippet": "Vscode에서 한글입력 안될때예전부터 리눅스에서는 Vscode 작성 중 한글 입력이 되지않아 주석을 전부 영어로 달았어야 했다.원래 그런줄 알고 그냥 그냥 써야지 했는데 원체 떨어지는 코딩실력에 영어 주석을 달아놓고 한달 뒤에 열었더니 뭔소리인지 하나도 모르는 대참사가 벌어졌다.검색을 해 봐도 인코딩만 건들면 해결된다는 이야기가 태반이었고, 문제해결의 국룰인 영어로 검색하기는 ‘한글 입력이 안되는’ 특수한 문제상황에서 전혀 도움이 되지 않았다.해결법은 간단하다.Case 1. 인코딩 선언우선 첫번째 줄에 # -*- coding: utf-8 -*-을 삽입해본다.차도가 있는가? 그렇다면 당신은 행운아!본인은 여기서 변화가 없어 뒤에 서술할 해결책에 근접했다가 포기하였다.Case 2. 제거 후 deb파일로 재설치snap 으로 vscode를 설치하였다면, 제거하고 deb 파일로 다시 설치한다.리눅스는 역시 터미널에서 설치해야지! 라는 근본없는 맹신을 갖고 있던 나는 snap로 삭제, snap로 재설치를 하는 희대의 삽질을 반복했고, 결국 여기서 한발짝 더 나아가지 못하고 한달동안 이 문제를 묵혀두게 된다. 그렇다면 이 방법은 어떻게 찾았느냐? 그냥 snap로 설치했음을 까먹고 얼마전 웨일을 deb로 깔았기에, 별 생각없이 deb로 설치를 해버렸다.(…)너무나 허무하게도 해결해버렸다.아무럼 어쩌리, 이 또한 한 가지 교훈이거늘." } ]
